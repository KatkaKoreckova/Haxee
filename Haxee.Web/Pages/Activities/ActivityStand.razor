@page "/current/stand/{StandNumber:int}"
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject IJSRuntime _js

@if(_stand is not null)
{
    @if(!_stand.IsStartingStand) 
    {
        <AddPenaltyModal @ref="_addPenaltyModal" OnSubmit="LoadStandAsync" />
        <ChangeStateModal @ref="_changeStateModal" OnSubmit="LoadStandAsync" />
        <div class="flex flex-row justify-between">
            <h1 class="title">Stanovisko @_stand.Number: @_stand.Name</h1>

            @if (_stand.Activity.Status == ActivityStatus.InProgress)
            {
                <button class="max-h-10 rounded-md bg-yellow px-4 py-0 font-semibold text-darkBlue transition duration-200 hover:text-white hover:bg-orange" @onclick=StartScanning>
                    Spustiť čítačku
                </button>
            }
        </div>
    } else
    {
        <h1 class="title">Štartovacie stanovisko</h1>
    }

    <div class="mt-2 flex flex-col space-y-4">
        @if(!_stand.IsStartingStand) 
        {
            foreach(var ongoingVisit in _stand.StandVisits.Where(x => x.LeaveTime == null))
            {
                <div class="flex flex-col rounded-md border-l-8 border-mint bg-slate-200 px-3 py-2.5 shadow-md shadow-slate-300">
                    <div class="flex w-full flex-col items-center justify-between text-darkBlue md:flex-row">
                        <div class="m-0 w-full font-bold md:w-1/3">
                            @ongoingVisit.Attendee.User.Name
                        </div>
                        <div class="flex w-full flex-col items-center space-y-3 md:space-y-0 md:flex-row md:w-2/3">
                            <div class="w-full text-center md:w-2/6">
                                <button type="button" class="button-main w-full md:w-[95%]" @onclick="() => _changeStateModal?.Open(_stand.Id, ongoingVisit.Id, ongoingVisit.Attendee.CardId)">
                                    Zmena statusu
                                </button>
                            </div>
                            <div class="w-full md:w-2/6">
                                <button type="button" class="button-delete w-full md:w-[95%]" @onclick="() => _addPenaltyModal?.Open(ongoingVisit.Id)">
                                    Penalta
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        } else
        {
            foreach(var scheduledVisit in _scheduledVisits)
            {
                <div class="flex flex-col rounded-md border-l-8 border-mint bg-slate-200 px-3 py-2.5 shadow-md shadow-slate-300">
                    <div class="flex w-full flex-col items-center justify-between text-darkBlue md:flex-row">
                        <div class="m-0 w-full font-bold md:w-1/3">
                            @scheduledVisit.Attendee.User.Name
                        </div>
                        <div class="flex w-full flex-col items-center space-y-3 md:space-y-0 md:flex-row md:w-2/3">
                            <div class="w-full md:w-2/6 md:text-center">
                                @scheduledVisit.Stand.Name
                            </div>
                            <div class="w-full md:w-2/6 md:text-center">
                                @scheduledVisit.Stand.Location
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
} else {
    <div class="mt-[5%] flex flex-col space-y-4">
        <div class="flex w-full flex-row justify-center">
            <img src="/images/reshot-illustration-construction-workers-DC8L5WUP23.png" class="w-3/4 md:w-2/3 lg:w-1/2" />
        </div>
        <h3 class="text-center font-semibold text-mainPurple">
            Toto stanovisko neexistuje.
        </h3>
    </div>
}

@code {
    [Parameter]
    public int StandNumber { get; set; }

    private Stand? _stand;
    private List<ScheduledVisit> _scheduledVisits = new();
    private AddPenaltyModal? _addPenaltyModal;
    private ChangeStateModal? _changeStateModal;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await LoadStandAsync();
        await LoadScheduledVisitsAsync();
        _ = Refresh();
    }

    private async Task Refresh()
    {
        if(_stand is null)
            return;

        await Task.Delay(1000);

        if(_stand.IsStartingStand)
            await LoadScheduledVisitsAsync();
        else
            await LoadStandAsync();

        await Refresh();
    }

    private async Task StartScanning()
    {
        var reference = DotNetObjectReference.Create(this);
        await _js.InvokeVoidAsync("initializeScanning", reference);
    }

    [JSInvokable]
    public void OnCardRead(string cardId)
    {
        if (_stand is null)
            return;

        _changeStateModal?.Open(_stand.Id, lastReceivedCardId: cardId);
    }

    private async Task LoadStandAsync()
    {
        using var db = _dbContextFactory.CreateDbContext();
        _stand = await db.Stands
            .Include(x => x.StandVisits)
                .ThenInclude(x => x.Attendee)
                    .ThenInclude(x => x.User)
            .Include(x => x.ScheduledVisits)
                .ThenInclude(x => x.Attendee)
                    .ThenInclude(x => x.User)
            .Include(x => x.Activity)
            .FirstOrDefaultAsync(x => x.Number.Equals(StandNumber));

        if (_stand is null)
            return;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadScheduledVisitsAsync()
    {
        using var db = _dbContextFactory.CreateDbContext();
        _scheduledVisits = await db.ScheduledVisits
            .Include(x => x.Stand)
            .Include(x => x.Attendee)
                .ThenInclude(x => x.User)
            .ToListAsync();

        if (_scheduledVisits is null)
            return;

        await InvokeAsync(StateHasChanged);
    }
}
