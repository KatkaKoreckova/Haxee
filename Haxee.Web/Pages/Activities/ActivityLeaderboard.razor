@page "/activity-leaderboard/{ActivityId:int}"
@inject IDbContextFactory<DataContext> _dbContextFactory

@if(_activity is not null) 
{
    int i = 1;
    foreach (var person in _activity.Attendees.OrderByDescending(x => x.StandVisits.Count).ThenByDescending(x => x.GetTime()))
    {
        <label>@i. @person.User.Name</label>
        <label>@(person.GetTime()?.ToString() ?? "-")</label>
        <label>@person.StandVisits.Count/@_stands.Count</label>
        <br/>
        <div>collapsible: 
            @foreach(var stand in _stands)
            {
                var targetVisit = person.StandVisits.FirstOrDefault(x => x.StandId == stand.Id);
                <label>@stand.Number. stanovisko (@stand.Location): 
                    @if(targetVisit is null) 
                    {
                        <label> Nenavštívené</label>
                    } else {
                        if(targetVisit.Skipped)
                        {
                            <label> Preskočené</label>
                        }
                        else if (targetVisit.LeaveTime == null)
                        {
                            <label> Aktuálne tu</label>
                        } else
                        {
                            <label> Hotové</label>
                        }

                        <label>
                            , príchod @targetVisit.StartTime
                            , odchod @targetVisit.LeaveTime, penalta @targetVisit.Penalty.ToString()
                        </label>
                    }
                </label>
                <br/>
            }
        </div>
        i++;
    }
}


@code {
    [Parameter]
    public int ActivityId { get; set; }

    private Activity? _activity;

    private List<Stand> _stands = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        _activity = await db.Activities
            .Include(x => x.Stands)
            .Include(x => x.Attendees)
                .ThenInclude(x => x.StandVisits)
            .Include(x => x.Attendees)
                .ThenInclude(x => x.User)
            .FirstOrDefaultAsync(x => x.Id.Equals(ActivityId));

        if (_activity is null)
            return;

        _stands = await db.Stands
            .Where(x => !x.IsStartingStand)
            .ToListAsync();

        StateHasChanged();
    }
}
