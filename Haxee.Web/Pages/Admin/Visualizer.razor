@page "/admin/visualizer"
@using System.IO.Compression
@using CsvHelper
@using System.Globalization
@using CsvHelper.Configuration
@using System.Text
@inject ILogger<Visualizer> _logger
@inject IWebHostEnvironment Environment

<h1 class="title">Vizualizácia</h1>

@if (_averageWaitTimes is null || _averagePenaltyTimes is null || _standings is null)
{
    <div class="form-group">
        <div>Nahrajte .csv súbor pre zobrazenie vizualizácie</div>

        <div class="h-full w-full">
            <label for="imageUpload" class="file-input">
                @if (_isLoading)
                {
                    <Spinner/>
                }
                else if (_fileUploadError is not null)
                {
                    <div class="validation-message">@_fileUploadError</div>
                    <div>Vyberte súbor</div>
                }
                else if (_uploadedFile is not null)
                {
                    <div class="w-full text-center font-normal">@_uploadedFile.Name (@_uploadedFile.Size B)</div> <br />
                    <div class="mt-4 w-full text-center">Zmeniť súbor</div>
                }
                else
                {
                    <div>Vyberte súbor</div>
                }
            </label>
            <InputFile OnChange="OnFileChanged" id="imageUpload" style="display: none" />
        </div>
    </div>
} else
{
    <button class="button-submit">Send to OpenCamp</button>

    <RadzenChart>
        <RadzenColumnSeries Data="@_averageWaitTimes" Title="Priemerné čakanie" CategoryProperty=@nameof(StringDoubleDataItem.Stand) ValueProperty=@nameof(StringDoubleDataItem.Value)>
            <RadzenSeriesDataLabels />
            <RadzenMarkers MarkerType="MarkerType.Circle" />
        </RadzenColumnSeries>
        <RadzenColumnSeries Data="@_averagePenaltyTimes" Title="Priemerná penalta" CategoryProperty=@nameof(StringDoubleDataItem.Stand) ValueProperty=@nameof(StringDoubleDataItem.Value)>
            <RadzenSeriesDataLabels />
            <RadzenMarkers MarkerType="MarkerType.Circle" />
        </RadzenColumnSeries>
        <RadzenCategoryAxis>
            <RadzenAxisTitle Text="Stanovisko" />
        </RadzenCategoryAxis>
        <RadzenValueAxis>
            <RadzenAxisTitle Text="Minúty" />
        </RadzenValueAxis>
        <RadzenColumnOptions Radius="5" Width="20" />
    </RadzenChart>

    <div>
        @{
            var totalTimes = _standings.Select(x => x.GetCalculatedTotalTime());
        }
        <b>Minimálny čas na splnenie:</b> @totalTimes.Min()<br/>
        <b>Priemerny čas na splnenie:</b> @(new TimeSpan(Convert.ToInt64(totalTimes.Average(x => x.Ticks))))<br/>
        <b>Maximálny čas na splnenie:</b> @totalTimes.Max()
    </div>

    <table>
        <thead>
            <tr>
                <th>Poradie</th>
                <th>Meno a priezvisko</th>
                <th>Celkový čas</th>
                <th>Body</th>
                <th>Percentil</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var standing in _standings) 
            {
                <tr>
                    <td>@standing.FinalStanding</td>
                    <td>@standing.Firstname @standing.Surname</td>
                    <td>@standing.GetCalculatedTotalTime()</td>
                    <td>@(standing.FinalPoints.HasValue ? Math.Round(standing.FinalPoints.Value) : "-")</td>
                    <td>@(standing.FinalPercentile.HasValue ? (Math.Round((1-standing.FinalPercentile.Value)*100, 1)) : "-")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? _fileUploadError;

    private IBrowserFile? _uploadedFile;

    private bool _isLoading;

    private List<StringDoubleDataItem>? _averageWaitTimes;
    private List<StringDoubleDataItem>? _averagePenaltyTimes;
    private List<AttendeeResultDTO>? _standings;

    private void ShowUploadError(string message)
    {
        _fileUploadError = message;
        _isLoading = false;
        StateHasChanged();
    }

    public async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        _isLoading = true;
        _fileUploadError = null;
        StateHasChanged();

        if (!e.File.ContentType.Contains("csv") && !e.File.ContentType.Equals("application/vnd.ms-excel"))
        {
            ShowUploadError("Súbor musí byť typu .csv.");
            return;
        }

        try
        {
            _uploadedFile = e.File;
            var folderPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "wwwroot","unsafe_uploads");

            if (!Directory.Exists(folderPath))
                Directory.CreateDirectory(folderPath);

            var extension = _uploadedFile.Name[(_uploadedFile.Name.LastIndexOf('.') + 1)..];

            string path;
            string trustedFileName;
            do
            {
                trustedFileName = Path.GetRandomFileName();
                trustedFileName = trustedFileName[..trustedFileName.LastIndexOf('.')] + $".{extension}";

                path = Path.Combine(folderPath, trustedFileName);
            } while (File.Exists(path));

            await using FileStream fs = new(path, FileMode.Create);
            await e.File.OpenReadStream(Constants.Limits.MAX_CSV_SIZE).CopyToAsync(fs);
            fs.Dispose();

            ReadFile(path);

            File.Delete(path);

            _isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError($"File upload failed, file name {e.File.Name}, error: {ex}");
            ShowUploadError("Vyskytla sa chyba pri nahrávaní csv súboru.");
        }
        StateHasChanged();
    }

    private void ReadFile(string path)
    {
        using var reader = new StreamReader(path, Encoding.UTF8);
        var config = new CsvConfiguration(CultureInfo.InvariantCulture)
        {
        };
        using var csv = new CsvReader(reader, config);
        var results = new List<AttendeeResultDTO>();

        csv.Read();
        csv.ReadHeader();

        if (csv.HeaderRecord is null)
            throw new Exception("Failed to read header record");

        while(csv.Read())
        {
            var row = csv.GetRecord<AttendeeResultDTO>();

            for(int i=1; i<Constants.Limits.MAX_STANDS; i++)
            {
                var waitingHeader = $"{i} C";
                var penaltyHeader = $"{i}P";

                if (!csv.HeaderRecord.Contains(waitingHeader) && !csv.HeaderRecord.Contains(penaltyHeader))
                    if (i > Constants.Limits.MIN_SCANNED_STANDS)
                        break;
                    else
                        continue;

                row.WaitingPeriods.Add(i, csv.GetField<int?>(waitingHeader).GetValueOrDefault());
                row.PenaltyPeriods.Add(i, csv.GetField<int?>(penaltyHeader).GetValueOrDefault());
            }

            results.Add(row);
        }

        _averageWaitTimes = results.SelectMany(x => x.WaitingPeriods).GroupBy(x => x.Key).Select(x => new StringDoubleDataItem { Stand = $"{x.Key}", Value = Math.Round(x.Average(y => y.Value), 2) }).ToList();
        _averagePenaltyTimes = results.SelectMany(x => x.PenaltyPeriods).GroupBy(x => x.Key).Select(x => new StringDoubleDataItem { Stand = $"{x.Key}", Value = Math.Round(x.Average(y => y.Value), 2) }).ToList();

        int standing = 1;
        foreach(var result in results.OrderBy(x => x.GetCalculatedTotalTime()))
        {
            result.FinalStanding = standing;
            standing++;
        }

        results = results.OrderBy(x => x.FinalStanding).ToList();

        var minTime = results.First().GetCalculatedTotalTime().TotalMilliseconds;
        var maxTime = results.Last().GetCalculatedTotalTime().TotalMilliseconds;

        foreach (var result in results)
        {
            var time = result.GetCalculatedTotalTime().TotalMilliseconds;
            double percentile = (time - minTime) / (maxTime - minTime);
            result.FinalPercentile = percentile;

            double points = (Constants.Limits.MAX_POINTS - (percentile * (Constants.Limits.MAX_POINTS - Constants.Limits.MIN_POINTS)));
            result.FinalPoints = points;
        }

        _standings = results;
    }

    private record StringDoubleDataItem
    {
        public required string Stand { get; set; }
        public required double Value { get; set; }
    }
}