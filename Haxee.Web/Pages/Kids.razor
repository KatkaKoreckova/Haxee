@page "/kids/{ActivityId:int}"
@inject IDbContextFactory<DataContext> _dbContextFactory

<PageTitle>Haxee - Kids</PageTitle>

<h1 class="title">Účastníci</h1>

<div class="mt-2 flex flex-col space-y-4">
    @foreach(var attendee in _attendees)
    {
        <div class="flex flex-col rounded-md border-l-8 border-mint bg-slate-200 p-3 shadow-md shadow-slate-300">
            <div class="flex w-full flex-col items-center justify-between text-darkBlue md:flex-row">
                <div class="m-0 w-full font-bold md:w-1/2">
                    @attendee.User.Name
                </div>
                <div class="flex w-full flex-row items-center md:w-1/2">
                    <div class="w-2/6 text-center">
                        @attendee.User.DateOfBirth
                    </div>
                    <div class="w-2/6 text-center">
                        @attendee.StandVisits.Where(x => x.LeaveTime != null).Count()/@attendee.Activity.Stands.Count
                    </div>
                    <div class="w-2/6">
                        @if(attendee.EndedAt is not null)
                        {
                            <div class="text-center">ukoncene</div>
                        } else if(attendee.StartedAt is null)
                        {
                            <button disabled="@((attendee.Activity.Status == ActivityStatus.InProgress) ? false : true)" class="w-full rounded-lg bg-blue px-3.5 py-1.5 text-center text-sm font-semibold text-white shadow-sm transition duration-200 hover:bg-orange hover:text-darkBlue hover:shadow-md" @onclick="() => StartAttendee(attendee)">
                                Štart
                            </button>
                        } else
                        {
                            <button disabled=@(!User.SuperInstructor && attendee.StandVisits.Count != _numberOfStands) class="w-full rounded-lg bg-yellow px-3.5 py-1.5 text-center text-sm font-semibold text-darkBlue shadow-sm transition duration-200 hover:bg-orange hover:shadow-md" @onclick="() => EndAttendee(attendee)">
                                Koniec
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User User { get; set; } = default!;

    [Parameter]
    public required int ActivityId { get; set; }

    private List<Attendee> _attendees = new();

    private int _numberOfStands;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await LoadAttendees();
    }

    private async Task StartAttendee(Attendee attendee)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetAttendee = await db.Attendees.FindAsync(attendee.Id);

        if (targetAttendee is null)
            return;

        targetAttendee.StartedAt = DateTime.Now;

        await db.SaveChangesAsync();
        await LoadAttendees();
    }

    private async Task EndAttendee(Attendee attendee)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetAttendee = await db.Attendees.FindAsync(attendee.Id);

        if (targetAttendee is null)
            return;

        targetAttendee.EndedAt = DateTime.Now;

        await db.SaveChangesAsync();
        await LoadAttendees();
    }

    private async Task LoadAttendees()
    {
        using var db = _dbContextFactory.CreateDbContext();

        _attendees = await db.Attendees
            .Include(x => x.User)
            .Include(x => x.StandVisits)
            .Include(x => x.Activity)
                .ThenInclude(x => x.Stands)
            .Where(x => x.ActivityId.Equals(ActivityId))
            .Where(x => x.User.UserType == Entities.Enums.UserType.Kid)
            .AsNoTracking()
            .ToListAsync();

        _numberOfStands = await db.Stands
            .Include(x => x.Activity)
            .Where(x => x.ActivityId.Equals(ActivityId))
            .AsNoTracking()
            .CountAsync();

        StateHasChanged();
    }
}
