@page "/kids"
@inject IDbContextFactory<DataContext> _dbContextFactory

<PageTitle>Haxee - Kids</PageTitle>

<h1 class="title">Účastníci</h1>

<div class="flex flex-col mt-2 space-y-4">
@foreach(var attendee in _attendees)
{
    <div class="bg-slate-200 rounded-md shadow-md shadow-slate-300 flex flex-col border-l-8 border-mint p-3">
        <div class="flex flex-col md:flex-row justify-between items-center text-darkBlue w-full">
            <div class="font-bold m-0 w-full md:w-1/2">
                @attendee.User.Name
            </div>
            <div class="flex flex-row items-center w-full md:w-1/2">
                <div class="w-2/6 text-center">
                    @attendee.User.DateOfBirth
                </div>
                <div class="w-2/6 text-center">
                    @attendee.StandVisits.Count/@attendee.Year.Stands.Count
                </div>
                <div class="w-2/6">
                    @if(attendee.EndedAt is not null)
                    {
                        <div class="text-center">ukoncene</div>
                    } else if(attendee.StartedAt is null)
                    {
                        <label class="w-full transition duration-200 bg-blue hover:bg-orange hover:text-darkBlue text-white px-3.5 py-1.5 rounded-lg text-sm shadow-sm hover:shadow-md font-semibold text-center" @onclick="() => StartAttendee(attendee)">
                            Štart
                        </label>
                    } else
                    {
                        <label class="w-full transition duration-200 bg-yellow hover:bg-orange text-darkBlue px-3.5 py-1.5 rounded-lg text-sm shadow-sm hover:shadow-md font-semibold text-center" @onclick="() => EndAttendee(attendee)">
                            Koniec
                        </label>
                    }
                </div>
            </div>
        </div>
    </div>
}
</div>

@code {
    private List<Attendee> _attendees = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await LoadAttendees();
    }

    private async Task StartAttendee(Attendee attendee)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetAttendee = await db.Attendees.FindAsync(attendee.Id);

        if (targetAttendee is null)
            return;

        targetAttendee.StartedAt = DateTime.Now;

        await db.SaveChangesAsync();
        await LoadAttendees();
    }

    private async Task EndAttendee(Attendee attendee)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetAttendee = await db.Attendees.FindAsync(attendee.Id);

        if (targetAttendee is null)
            return;

        targetAttendee.EndedAt = DateTime.Now;

        await db.SaveChangesAsync();
        await LoadAttendees();
    }

    private async Task LoadAttendees()
    {
        using var db = _dbContextFactory.CreateDbContext();

        _attendees = await db.Attendees
            .Include(x => x.User)
            .Include(x => x.StandVisits)
            .Include(x => x.Year)
                .ThenInclude(x => x.Stands)
            .Where(x => x.Year.YearValue.Equals(DateTime.Now.Year))
            .Where(x => x.User.UserType == Entities.Enums.UserType.Kid)
            .AsNoTracking()
            .ToListAsync();

        StateHasChanged();
    }
}
