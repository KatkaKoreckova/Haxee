@page "/admin/accounts"
@using System.Web;
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@layout AdminPanelLayout

<DeleteUserModal @ref="_deleteUserModal" OnSubmit="LoadUsers"/>
<DeleteUsersModal @ref="_deleteUsersModal" OnSubmit="LoadUsers" />

<h1 class="title">Zoznam účtov</h1>
@if(_users is null)
{
    <Spinner/>
} else if(_users.Count == 0)
{
    <h2>No accounts</h2>
} else
{
    <div class="flex flex-row space-x-4">
        <button @onclick='async () => await SendPasswordsToAll()'>
            Poslať heslo všetkým
        </button>
        <button @onclick='async () => await SendPasswordsToKids()'>
            Poslať heslo učastníkom
        </button>
        <button @onclick='async () => await SendPasswordsToInstructors()'>
            Poslať heslo vedúcim
        </button>
        <button class="button-delete" @onclick="() => _deleteUsersModal?.Open(true, true)">
            Zmazať všetky účty
        </button>
        <button class="button-delete" @onclick="() => _deleteUsersModal?.Open(true, false)">
            Zmazať účty účastníkom
        </button>
        <button class="button-delete" @onclick="() => _deleteUsersModal?.Open(false, true)">
            Zmazať účty vedúcim
        </button>
    </div>
    foreach (var user in _users)
    {
        <div class="flex flex-col mt-2 space-y-4">
              
            <div class="bg-slate-200 rounded-md shadow-md shadow-slate-300 flex flex-col border-l-8 border-mint p-3">
                <div class="flex flex-col md:flex-row justify-between items-center text-darkBlue w-full">
                    <div class="font-bold m-0 w-full md:w-1/2">
                        @user.Name
                    </div>
                    <div class="flex flex-row items-center w-full md:w-1/2">
                        <div class="w-2/6 text-center">
                            @user.CardId
                        </div>
                        <div class="w-2/6 text-center">
                            @user.Email
                        </div>
                        <div class="w-2/6 flex flex-row justify-around">
                            <button class="w-1/3 transition duration-200 bg-blue hover:bg-yellow hover:text-darkBlue text-white px-3.5 py-1.5 rounded-lg text-sm shadow-sm hover:shadow-md font-semibold text-center"
                                @onclick='async () => await SendPasswordToUser(user)'>
                                Heslo
                            </button>
                            <button disabled=@user.Id.Equals(User.Id) class="w-1/3 transition duration-200 bg-orange hover:bg-red-800 text-white px-3.5 py-1.5 rounded-lg text-sm shadow-sm hover:shadow-md font-semibold text-center"
                                @onclick="() => _deleteUserModal?.Open(user.Id, user.Name)">
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User User { get; set; } = default!;

    private DeleteUserModal? _deleteUserModal;
    private DeleteUsersModal? _deleteUsersModal;

    private List<User>? _users;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await LoadUsers();
    }

    private async Task SendPasswordToUser(User user)
    {
        var query = HttpUtility.ParseQueryString(string.Empty);
        query["id"] = user.Id;
        var response = await _httpClient.PostAsync($"{_navigationManager.BaseUri}api/password?{query}", null);
        response.EnsureSuccessStatusCode();
    }

    private async Task SendPasswordsToInstructors() 
    {
        if (_users is null)
            return;

        foreach(var instructor in _users.Where(x => x.UserType.Equals(UserType.Instructor)))
            await SendPasswordToUser(instructor);
    }

    private async Task SendPasswordsToKids()
    {
        if (_users is null)
            return;

        foreach (var kid in _users.Where(x => x.UserType.Equals(UserType.Kid)))
            await SendPasswordToUser(kid);
    }

    private async Task SendPasswordsToAll()
    {
        await SendPasswordsToInstructors();
        await SendPasswordsToKids();
    }

    private async Task LoadUsers()
    {
        using var db = _dbContextFactory.CreateDbContext();

        _users = await db.Users.ToListAsync();

        StateHasChanged();
    }
}