@page "/hifilist"
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject NavigationManager _navigationManager

<PageTitle>Haxee - HiFi Ralley</PageTitle>

<div class="flex flex-row justify-between">
    <h1 class="title">Aktivity</h1>

    @if (User.SuperInstructor)
    {
        <CreateActivityModal @ref="_createActivityModal" OnSubmit="LoadActivities" />
        <EditActivityModal @ref="_editActivityModal" OnSubmit="LoadActivities" />

        <div>
            <button class="h-10 transition duration-200 px-4 py-0 font-semibold rounded-md text-darkBlue bg-yellow hover:text-white hover:bg-orange" @onclick="() => _createActivityModal?.Open()">
                <span class="inline-block"><i class="fa-solid fa-plus"></i></span>
                <span class="hidden md:inline-block">Vytvoriť</span>
            </button>
        </div>
    }
</div>

<div class="mt-2 grid gap-4 lg:gap-6 sm:grid-cols-3 lg:grid-cols-4">
    @foreach(var activity in _activities.OrderByDescending(x => x.Id))
    {
        var attendees = activity.Attendees.Where(x => x.StartedAt != null && x.EndedAt != null);
        <div class="w-full bg-slate-200 rounded-md shadow-md shadow-slate-300 p-4">
            <h1 class="text-mainPurple text-center font-bold">@activity.Name</h1>
            <div class="flex flex-row space-x-2 items-center text-darkBlue mt-3">
                <i class="fa-solid fa-map-location-dot"></i>
                <h4>@activity.Stands.Count()</h4>
            </div>
            <div class="flex flex-row space-x-2 items-center text-darkBlue mt-3">
                <i class="fa-solid fa-clock"></i>
                <h4>@(attendees.Any() ? TimeSpan.FromSeconds(attendees.Average(x => (x.EndedAt! - x.StartedAt!).Value.TotalSeconds)).ToString() : "-")</h4>
            </div>
            <button class="w-full mt-3 transition duration-200 bg-blue hover:bg-orange hover:text-darkBlue text-white px-3.5 py-1.5 rounded-lg text-sm shadow-sm hover:shadow-md font-semibold text-center" @onclick='() => _navigationManager.NavigateTo("/hifiactivity/" + activity.Id)'>
                Detail
            </button>
            @if (User.SuperInstructor)
            {
                <button class="w-full mt-3 transition duration-200 bg-slate-200 px-3.5 py-1.5 rounded-lg text-sm shadow-sm hover:shadow-md font-semibold text-center" @onclick='async () => await _editActivityModal.Open(activity.Id)'>
                    Upraviť
                </button>
            }
        </div>
}
</div>

@code {
    [CascadingParameter(Name = Constants.CascadingParameters.CurrentAccount)]
    private User User { get; set; } = default!;

    private CreateActivityModal? _createActivityModal;
    private EditActivityModal? _editActivityModal;

    private List<Activity> _activities = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await LoadActivities();
    }

    private async Task LoadActivities()
    {
        using var db = _dbContextFactory.CreateDbContext();

        _activities = await db.Activities
            .Include(x => x.Stands)
            .ToListAsync();

        StateHasChanged();
    }
}
