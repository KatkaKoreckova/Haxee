@page "/current/stand/{StandNumber:int}"
@inject IDbContextFactory<DataContext> _dbContextFactory
@inject IJSRuntime _js

<AddPenaltyModal @ref="_addPenaltyModal" OnSubmit="LoadStandAsync" />
<ChangeStateModal @ref="_changeStateModal" OnSubmit="LoadStandAsync" />

@if(_stand is not null)
{
    <div class="flex flex-row justify-between">
        <h1 class="title">Stanovisko @_stand.Number: @_stand.Name</h1>

         @if (_stand.Year.Status == YearStatus.InProgress)
         {
            <button class="max-h-10 transition duration-200 px-4 py-0 font-semibold rounded-md text-darkBlue bg-yellow hover:text-white hover:bg-orange" @onclick=StartScanning>
                Spustiť čítačku
            </button>
         }
    </div>

    <div class="flex flex-col mt-2 space-y-4">
        @foreach(var ongoingVisit in _stand.StandVisits.Where(x => x.Status != StandVisitStatus.Done))
        {
            <div class="bg-slate-200 rounded-md shadow-md shadow-slate-300 flex flex-col border-l-8 border-mint px-3 py-2.5">
                <div class="flex flex-col md:flex-row justify-between items-center text-darkBlue w-full">
                    <div class="font-bold m-0 w-full md:w-1/3">
                        @ongoingVisit.Attendee.User.Name
                    </div>
                    <div class="flex flex-col space-y-3 md:space-y-0 md:flex-row items-center w-full md:w-2/3">
                        <div class="w-full md:w-2/6 md:text-center">
                            @ongoingVisit.Status.GetDisplayName()
                        </div>
                        <div class="w-full md:w-2/6 text-center">
                            <button type="button" class="w-full md:w-[95%] button-main" @onclick="() => _changeStateModal?.Open(_stand.Id, ongoingVisit.Id)">
                                Zmena statusu
                            </button>
                        </div>
                        <div class="w-full md:w-2/6">
                            <button type="button" class="w-full md:w-[95%] button-delete" @onclick="() => _addPenaltyModal?.Open(ongoingVisit.Id)">
                                Penalta
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
} else {
    <div class="flex flex-col space-y-4 mt-[5%]">
        <div class="flex flex-row justify-center w-full">
            <img src="/images/reshot-illustration-construction-workers-DC8L5WUP23.png" class="w-3/4 md:w-2/3 lg:w-1/2" />
        </div>
        <h3 class="text-mainPurple font-semibold text-center">
            Toto stanovisko neexistuje.
        </h3>
    </div>
}

@code {
    [Parameter]
    public int StandNumber { get; set; }

    private Stand? _stand;
    private AddPenaltyModal? _addPenaltyModal;
    private ChangeStateModal? _changeStateModal;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await LoadStandAsync();
    }

    private async Task StartScanning()
    {
        var reference = DotNetObjectReference.Create(this);
        await _js.InvokeVoidAsync("initializeScanning", reference);
    }

    [JSInvokable]
    public void OnCardRead(string cardId)
    {
        if (_stand is null)
            return;

        _changeStateModal?.Open(_stand.Id, lastReceivedCardId: cardId);
    }

    private async Task LoadStandAsync()
    {
        using var db = _dbContextFactory.CreateDbContext();
        _stand = await db.Stands
            .Include(x => x.StandVisits)
                .ThenInclude(x => x.Attendee)
                    .ThenInclude(x => x.User)
            .Include(x => x.Year)
            .FirstOrDefaultAsync(x => x.Number.Equals(StandNumber));

        if (_stand is null)
            return;

        StateHasChanged();
    }
}
