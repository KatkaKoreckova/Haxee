@page "/hifiactivitystats/{ActivityId:int}"
@inject IDbContextFactory<DataContext> _dbContextFactory
@using System.Globalization

@if(_activity is not null)
{
    <h1 class="title">Štatistika Hi-Fi @_activity.Name</h1>

    <RadzenChart>
        <RadzenLineSeries Smooth="@_smooth" Data="@_finishedCounts" CategoryProperty="StandId" Title="Zvládli" ValueProperty="Value">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="@_showDataLabels" />
        </RadzenLineSeries>
        <RadzenLineSeries Smooth="@_smooth" Data="@_notFinishedCounts" CategoryProperty="StandId" Title="Nedokončili" ValueProperty="Value">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="@_showDataLabels" />
        </RadzenLineSeries>
        <RadzenLineSeries Smooth="@_smooth" Data="@_skippedCounts" CategoryProperty="StandId" Title="Preskočili" ValueProperty="Value">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="@_showDataLabels" />
        </RadzenLineSeries>
        <RadzenCategoryAxis Padding="5" Min="0" Max="@_activity.Stands.Count()">
            <RadzenAxisTitle Text="Číslo stanoviska" />
        </RadzenCategoryAxis>
        <RadzenValueAxis Step="5">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Počet účastníkov" />
        </RadzenValueAxis>
    </RadzenChart>
} else {
    <div class="flex flex-col space-y-4 mt-[5%]">
        <div class="flex flex-row justify-center w-full">
            <img src="/images/reshot-illustration-construction-workers-DC8L5WUP23.png" class="w-3/4 md:w-2/3 lg:w-1/2" />
        </div>
        <h3 class="text-mainPurple font-semibold text-center">
            Nie je dostupná štatistika
        </h3>
    </div>
}

@code {
    [Parameter]
    public int ActivityId { get; set; }

    private Activity? _activity;

    bool _smooth = true;
    bool _showDataLabels = true;

    public class StatInfo
    {
        public int StandId { get; set; }
        public int Value { get; set; }
    }

    private List<StatInfo> _finishedCounts = new();
    private List<StatInfo> _notFinishedCounts = new();
    private List<StatInfo> _skippedCounts = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        _activity = await db.Activities
            .Include(x => x.Stands)
                .ThenInclude(x => x.StandVisits)
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id.Equals(ActivityId));

        if (_activity is null)
            return;

        _finishedCounts = _activity.Stands.Select(x => new StatInfo
        {
            StandId = x.Number,
            Value = x.StandVisits.Where(x => x.LeaveTime != null && !x.Skipped).Count()
        }).ToList();

        _notFinishedCounts = _activity.Stands.Select(x => new StatInfo
        {
            StandId = x.Number,
            Value = x.StandVisits.Where(x => x.LeaveTime == null).Count()
        }).ToList();

        _skippedCounts = _activity.Stands.Select(x => new StatInfo
        {
            StandId = x.Number,
            Value = x.StandVisits.Where(x => x.LeaveTime != null && x.Skipped).Count()
        }).ToList();

        StateHasChanged();
    }

}