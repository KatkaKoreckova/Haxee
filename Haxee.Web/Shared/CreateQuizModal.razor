@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref="Modal" Title="Vytvoriť kvíz" SubmitText="Vytvoriť" OnSubmitAttempted="OnSubmitAttempted">
    <EditForm class="form" EditContext="_editContext" OnSubmit="OnSubmitAttempted">
        <DataAnnotationsValidator />

        <div class="form-group">
            <Name For="() => _createQuizModel.Name" />
            <InputText class="input-field" @bind-Value="_createQuizModel.Name" placeholder="Blackbox" />
            <ValidationMessage For="() => _createQuizModel.Name" />
        </div>

        <div class="form-group mt-3">
            <Name For="() => _createQuizModel.Location" />
            <InputText class="input-field" @bind-Value="_createQuizModel.Location" placeholder="les" />
            <ValidationMessage For="() => _createQuizModel.Location" />
        </div>

        <div class="form-group mt-3">
            <Name For="() => _createQuizModel.PenaltyInMinutes" />
            <InputNumber class="input-field" @bind-Value="_createQuizModel.PenaltyInMinutes" />
            <ValidationMessage For="() => _createQuizModel.PenaltyInMinutes" />
        </div>

        <div class="form-group mt-3">
            <Name For="() => _createQuizModel.Capacity" />
            <InputNumber class="input-field" @bind-Value="_createQuizModel.Capacity" />
            <ValidationMessage For="() => _createQuizModel.Capacity" />
        </div>

        <div class="form-group mt-3">
            <Name For="() => _createQuizModel.QuestionsAndAnswers" />
            <InputTextArea class="input-field" @bind-Value="_createQuizModel.QuestionsAndAnswers" />
            <ValidationMessage For="() => _createQuizModel.QuestionsAndAnswers" />
        </div>

        <button class="hidden" type="submit">Create</button>
    </EditForm>
</Modal>

@code {
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private int _yearId { get; set; }

    private CreateQuizModel _createQuizModel = new();

    private EditContext? _editContext;

    public void Open(int yearId)
    {
        _yearId = yearId;

        _createQuizModel = new();
        _editContext = new EditContext(_createQuizModel);

        base.Open();
    }

    private async Task OnSubmitAttempted()
    {
        if (Modal is null || _editContext is null || _createQuizModel is null)
            return;

        if (!_editContext.Validate())
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var highestStand = await db.Stands
            .AsNoTracking()
            .Where(x => x.YearId.Equals(_yearId))
            .OrderByDescending(x => x.Number)
            .FirstOrDefaultAsync();

        var newStand = new Stand()
        {
            Name = _createQuizModel.Name,
            Location = _createQuizModel.Location,
            Number = highestStand is null ? 1 : highestStand.Number + 1,
            Penalty = TimeSpan.FromMinutes(_createQuizModel.PenaltyInMinutes),
            YearId = _yearId,
            IsQuiz = true,
            QuestionsAndAnswers = _createQuizModel.QuestionsAndAnswers.Split("\n").ToList(),
            Capacity = _createQuizModel.Capacity
        };

        db.Stands.Add(newStand);
        await db.SaveChangesAsync();

        await Modal.Close();
        await OnSubmit.InvokeAsync();
    }
}