@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref="Modal" Title="Edit stand" OnSubmitAttempted="OnSubmitAttempted">
    <EditForm class="form" EditContext="_editContext" OnSubmit="OnSubmitAttempted">
        <DataAnnotationsValidator />

        <div class="form-group">
            <Name For="() => _createStandModel.Name" />
            <InputText class="form-control" @bind-Value="_createStandModel.Name" />
            <ValidationMessage For="() => _createStandModel.Name" />
        </div>

        <div class="form-group">
            <Name For="() => _createStandModel.Location" />
            <InputText class="form-control" @bind-Value="_createStandModel.Location" />
            <ValidationMessage For="() => _createStandModel.Location" />
        </div>

        <div class="form-group">
            <Name For="() => _createStandModel.PenaltyInSeconds" />
            <InputNumber class="form-control" @bind-Value="_createStandModel.PenaltyInSeconds" />
            <ValidationMessage For="() => _createStandModel.PenaltyInSeconds" />
        </div>

        <div class="form-group">
            <Name For="() => _createStandModel.Supervisor" />
            <BlazoredTypeahead MaximumSuggestions="999"
                               MinimumLength="0"
                               SearchMethod="SearchInstructors"
                               @bind-Value="_createStandModel.Supervisor">
                <SelectedTemplate Context="typeaheadContext">
                    @typeaheadContext?.Name
                </SelectedTemplate>
                <ResultTemplate Context="typeaheadContext">
                    @typeaheadContext?.Name
                </ResultTemplate>
                <NotFoundTemplate Context="typeaheadContext">
                    Žiadne výsledky
                </NotFoundTemplate>
            </BlazoredTypeahead>
            <ValidationMessage For="() => _createStandModel.Supervisor" />
        </div>

        <button class="hidden" type="submit">Edit</button>
    </EditForm>
</Modal>

@code {
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private CreateStandModel _createStandModel = new();

    private EditContext? _editContext;

    private List<User> _instructors = new();

    private Stand? _stand;

    public async void Open(int standId)
    {
        using var db = _dbContextFactory.CreateDbContext();
        _instructors = await db.Users.Where(x => x.UserType == UserType.Instructor).ToListAsync();
        _stand = await db.Stands
            .Include(x => x.Supervisor)
            .FirstOrDefaultAsync(x => x.Id.Equals(standId));

        if (_stand is null)
            return;

        _createStandModel = new()
        {
            Name = _stand.Name,
            Location = _stand.Location,
            PenaltyInSeconds = (int) _stand.Penalty.TotalSeconds,
            Supervisor = _stand.Supervisor
        };
        _editContext = new EditContext(_createStandModel);

        base.Open();
    }

    private async Task OnSubmitAttempted()
    {
        if (Modal is null || _editContext is null || _createStandModel is null || _stand is null)
            return;

        if (!_editContext.Validate())
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var targetStand = await db.Stands
            .FirstOrDefaultAsync(x => x.Id.Equals(_stand.Id));

        if (targetStand is null)
            return;

        targetStand.Name = _createStandModel.Name;
        targetStand.Location = _createStandModel.Location;
        targetStand.Penalty = TimeSpan.FromSeconds(_createStandModel.PenaltyInSeconds);
        targetStand.SupervisorId = _createStandModel.Supervisor?.Id;

        await db.SaveChangesAsync();

        await Modal.Close();
        await OnSubmit.InvokeAsync();
    }

    private async Task<IEnumerable<User>> SearchInstructors(string searchText)
    {
        return await Task.FromResult(_instructors!.Where(x => x.Name.Has(searchText)).ToList());
    }
}