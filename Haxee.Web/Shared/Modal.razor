@if (_triggeredShow)
{
    <div data-active="@_shown.ToString()" class="fixed top-0 left-0 w-full h-full outline-none overflow-x-hidden overflow-y-auto bg-gray-700 ease-in-out transition-all bg-opacity-0 data-[active=True]:bg-opacity-40">
        <div class="relative max-w-lg mx-auto mt-4">
            <div data-active="@_shown.ToString()" class="border-none my-shadow relative flex flex-col w-full pointer-events-auto bg-white bg-clip-padding rounded-3xl outline-none text-current bg-opacity-0 transition-all ease-in-out data-[active=False]:translate-y-[500%] data-[active=True]:bg-opacity-100" @onclick="() => {}">
                <div class="flex flex-shrink-0 items-center justify-between p-4 border-b border-gray-200">
                    <h5 class="text-xl font-medium leading-normal text-gray-800">@Title</h5>
                    <button class="box-content text-xl w-4 h-full p-1 font-black text-gray-400 border-none rounded-none focus:shadow-none focus:outline-none focus:opacity-100 hover:text-black hover:opacity-75 hover:no-underline bg-transparent hover:bg-transparent hover:shadow-none" @onclick="Cancel">
                        <i class="fa fa-xmark"></i>
                    </button>
                    
                </div>
                <div class="relative p-4">@ChildContent</div>
                <div class="flex flex-col space-y-2 p-4 border-t border-gray-200">
                    <button class='@((SubmitText is null) ? "hidden" : "w-full") @(RedSubmit ? "button-delete" : "button-submit")' @onclick="Submit">@SubmitText</button>
                    <button class='button-gray' @onclick="Cancel">Zrušiť</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public required string Title { get; set; }

    [Parameter]
    public string? SubmitText { get; set; }

    [Parameter]
    public required RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnSubmitAttempted { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public bool RedSubmit { get; set; }

    private bool _triggeredShow;
    private bool _shown;

    public async Task Show()
    {
        if (!_triggeredShow)
        {
            _triggeredShow = true;
            StateHasChanged();
            await Task.Delay(5);
        }
        _shown = true;
        StateHasChanged();
    }

    public async Task Close()
    {
        _shown = false;
        StateHasChanged();
        await Task.Delay(200);
        _triggeredShow = false;
        StateHasChanged();
    }

    private async Task Cancel()
    {
        await OnClose.InvokeAsync();

        await OnCancel.InvokeAsync();

        await Close();
    }

    private async Task Submit()
    {
        await OnSubmitAttempted.InvokeAsync();
    }
}