@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref="Modal" Title="Upraviť zariadenie" SubmitText="Upraviť" OnSubmitAttempted="OnSubmitAttempted">
    <EditForm class="form" EditContext="_editContext" OnSubmit="OnSubmitAttempted">
        <DataAnnotationsValidator />

        <div class="form-group">
            <Name For="() => _createDeviceModel.Name" />
            <InputText class="input-field" @bind-Value="_createDeviceModel.Name" placeholder="LSTME 123" />
            <ValidationMessage For="() => _createDeviceModel.Name" />
        </div>

        <div class="form-group">
            <Name For="() => _createDeviceModel.Identifier" />
            <InputText class="input-field" @bind-Value="_createDeviceModel.Identifier" placeholder="123456789" />
            <ValidationMessage For="() => _createDeviceModel.Identifier" />
        </div>

        <button class="hidden" type="submit">Upraviť</button>
    </EditForm>
</Modal>

@code {
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private CreateDeviceModel _createDeviceModel = new();

    private EditContext? _editContext;

    private Device? _device;

    public async Task Open(int deviceId)
    {
        using var db = _dbContextFactory.CreateDbContext();

        _device = await db.Devices.FirstOrDefaultAsync(x => x.Id.Equals(deviceId));

        if (_device is null)
            return;

        _createDeviceModel = new()
        {
            Name = _device.Name,
            Identifier = _device.Identifier
        };
        _editContext = new EditContext(_createDeviceModel);

        base.Open();
    }

    private async Task OnSubmitAttempted()
    {
        if (Modal is null || _editContext is null || _createDeviceModel is null || _device is null)
            return;

        if (!_editContext.Validate())
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var targetDevice = await db.Devices.FirstOrDefaultAsync(x => x.Id.Equals(_device.Id));

        if (targetDevice is null)
            return;

        targetDevice.Name = _createDeviceModel.Name;
        targetDevice.Identifier = _createDeviceModel.Identifier;

        await db.SaveChangesAsync();

        await Modal.Close();
        await OnSubmit.InvokeAsync();
    }
}