@inject IDbContextFactory<DataContext> _dbContextFactory

<div>
    @if (_standStatsModel is not null)
    {
        <div class="flex h-full flex-col rounded-md border-l-8 border-orange bg-slate-200 p-3 shadow-md shadow-slate-300">
            <div class="mr-14 flex flex-row items-center text-darkBlue">
                <h3 class="self-center font-extralight"><i class="fa-solid fa-map-location-dot"></i></h3>
                <h3 class="ml-3 self-center">Stanoviská</h3>
            </div>
            <div class="mt-3 grid grid-cols-3 grid-rows-2 gap-2">
                <div class="col-span-2 col-start-1 row-start-1">
                    Najpomalšie:
                </div>
                <div class="col-span-2 col-start-3 row-start-1 text-center font-bold text-orange">
                    @(_standStatsModel.LongestStand?.Number.ToString() ?? "-")
                </div>
                <div class="col-span-2 col-start-1 row-start-2">
                    Najkratšie:
                </div>
                <div class="col-span-2 col-start-3 row-start-2 text-center font-bold text-orange">
                   @(_standStatsModel.ShortestStand?.Number.ToString() ?? "-")
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public required int ActivityId { get; set; }

    private StandStatsModel? _standStatsModel;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        using var db = _dbContextFactory.CreateDbContext();
        var activity = await db.Activities
            .Include(x => x.Stands)
                .ThenInclude(x => x.StandVisits)
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id.Equals(ActivityId));

        if (activity is null)
            return;

        var orderedStandsByCompletionTime = activity.Stands.OrderBy(x => x.StandVisits.Where(y => y.LeaveTime != null).Sum(x => (x.LeaveTime! - x.StartTime).Value.TotalSeconds));

        _standStatsModel = new()
            {
                LongestStand = orderedStandsByCompletionTime.FirstOrDefault(),
                ShortestStand = orderedStandsByCompletionTime.LastOrDefault()
            };

        StateHasChanged();
    }
}
