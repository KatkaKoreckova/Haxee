@inject IDbContextFactory<DataContext> _dbContextFactory

@if(_currentActivityStats is not null) 
{
    int i = 1;
    <div class="flex flex-col mt-2 space-y-4">
    @foreach(var person in _currentActivityStats.OrderByDescending(x => x.VisitedStands).ThenByDescending(x => x.Time))
    {
        string colorBorder = (i == 1) ? "border-goldMain" : (i == 2) ? "border-silverMain" : (i == 3) ? "border-bronzeMain" : "mint"; 
        <div class="bg-slate-200 rounded-md shadow-md shadow-slate-300 flex flex-col border-l-8 @colorBorder p-3">
            <div class="flex flex-col md:flex-row justify-between items-center text-darkBlue w-full">
                <div class="font-bold m-0 w-full md:w-1/2">
                    @i. @person.FullName
                </div>
                <div class="flex flex-row items-center w-full md:w-1/2">
                    <div class="w-1/2 text-center">
                        @(person.Time?.ToString() ?? "-")
                    </div>
                    <div class="w-1/2 text-center">
                        @person.VisitedStands/@_numberOfStands
                    </div>
                </div>
            </div>
        </div>
        i++;
    }
    </div>
}


@code {
    [Parameter]
    public int ActivityId { get; set; }

    private List<AttendeeLeaderboardModel>? _currentActivityStats;

    private int _numberOfStands;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var currentActivity = await db.Activities
            .Include(x => x.Stands)
            .Include(x => x.Attendees)
                .ThenInclude(x => x.StandVisits)
            .Include(x => x.Attendees)
                .ThenInclude(x => x.User)
            .FirstOrDefaultAsync(x => x.Id.Equals(ActivityId));

        if (currentActivity is null)
            return;

        _numberOfStands = currentActivity.Stands.Count;
        _currentActivityStats = currentActivity.Attendees.Select(x => new AttendeeLeaderboardModel
            {
                FullName = x.User.Name,
                VisitedStands = x.StandVisits.Count,
                Time = x.GetTime()
            }).ToList();

        StateHasChanged();
    }
}
