@inherits AbstractModal
@inject IDbContextFactory<DataContext> _dbContextFactory

<Modal @ref="Modal" Title="Vytvoriť aktivitu" SubmitText="Vytvoriť" OnSubmitAttempted="OnSubmitAttempted">
    <EditForm class="form" EditContext="_editContext" OnSubmit="OnSubmitAttempted">
        <DataAnnotationsValidator />

        <div class="form-group">
            <Name For="() => _createActivityModel.Name" />
            <InputText class="input-field" @bind-Value="_createActivityModel.Name" placeholder="2025 Hi-Fi Ralley" />
            <ValidationMessage For="() => _createActivityModel.Name" />
        </div>

        <div class="form-group mt-3">
            <Name For="() => _createActivityModel.BrokerIp" />
            <InputText class="input-field" @bind-Value="_createActivityModel.BrokerIp" placeholder="127.0.0.1" />
            <ValidationMessage For="() => _createActivityModel.BrokerIp" />
        </div>

        <div class="form-group mt-3">
            <Name For="() => _createActivityModel.BrokerPort" />
            <InputNumber class="input-field" @bind-Value="_createActivityModel.BrokerPort" />
            <ValidationMessage For="() => _createActivityModel.BrokerPort" />
        </div>

        <div class="form-group mt-3">
            <Name For="() => _createActivityModel.GlobalTopic" />
            <InputText class="input-field" @bind-Value="_createActivityModel.GlobalTopic" placeholder="lstme/2/json/LSTME/#" />
            <ValidationMessage For="() => _createActivityModel.GlobalTopic" />
        </div>

        <button class="hidden" type="submit">Create</button>
    </EditForm>
</Modal>

@code {
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    private CreateActivityModel _createActivityModel = new();

    private EditContext? _editContext;

    public override void Open()
    {
        _createActivityModel = new();
        _editContext = new EditContext(_createActivityModel);

        base.Open();
    }

    private async Task OnSubmitAttempted()
    {
        if (Modal is null || _editContext is null || _createActivityModel is null)
            return;

        if (!_editContext.Validate())
            return;

        using var db = _dbContextFactory.CreateDbContext();

        var activity = new Activity()
        {
            Name = _createActivityModel.Name,
            BrokerIp = _createActivityModel.BrokerIp,
            BrokerPort = _createActivityModel.BrokerPort,
            GlobalTopic = _createActivityModel.GlobalTopic
        };

        db.Activities.Add(activity);

        activity.AddDefaultStand();

        await db.SaveChangesAsync();

        await Modal.Close();
        await OnSubmit.InvokeAsync();
    }
}